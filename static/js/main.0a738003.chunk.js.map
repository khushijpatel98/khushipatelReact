{"version":3,"sources":["logo.svg","serviceWorker.js","Component/User.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","UserDisplay","props","undefined","user","className","Card","Body","Title","firstName","lastName","Text","email","gender","department","User","useState","setUser","initialValues","password","confirmPassword","acceptTandC","validationSchema","Yup","shape","required","min","oneOf","onSubmit","result","errors","touched","name","type","component","value","as","label","htmlFor","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a738003.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useState } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nfunction User() {\r\n  const [user, setUser] = useState();\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          firstName: \"\",\r\n          lastName: \"\",\r\n          password: \"\",\r\n          confirmPassword: \"\",\r\n          gender: \"male\",\r\n          acceptTandC: false,\r\n          email: \"\",\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          firstName: Yup.string().required(\"First Name Required\"),\r\n          lastName: Yup.string().required(\"Last Name Required\"),\r\n          password: Yup.string()\r\n            .min(6, \"Password length must be 6 chararacter long\")\r\n            .required(\"Password is required\"),\r\n          confirmPassword: Yup.string()\r\n            .oneOf([Yup.ref(\"password\")], \"Password Should match\")\r\n            .required(\"Password is required\"),\r\n          department: Yup.string().required(\"Department is required\"),\r\n          acceptTandC: Yup.bool().oneOf([true], \"You must accept T&C\"),\r\n          email: Yup.string()\r\n            .email(\"Email is invalid\")\r\n            .required(\"Email is required\"),\r\n        })}\r\n        onSubmit={(result) => {\r\n          setUser(result);\r\n        }}\r\n      >\r\n        {({ errors, touched }) => (\r\n          <Form>\r\n            <div className=\"\">\r\n              <div className=\"form-group\">\r\n                <div className=\"form-group m-0\">\r\n                  <label>First Name</label>\r\n                  <Field\r\n                    name=\"firstName\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control \" +\r\n                      (errors.firstName && touched.firstName\r\n                        ? \"is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"firstName\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group m-0\">\r\n                  <label>Last Name</label>\r\n                  <Field\r\n                    name=\"lastName\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control \" +\r\n                      (errors.lastName && touched.lastName ? \"is-invalid\" : \"\")\r\n                    }\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"lastName\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group m-0\">\r\n                  <label>email</label>\r\n                  <Field\r\n                    name=\"email\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control \" +\r\n                      (errors.email && touched.email ? \"is-invalid\" : \"\")\r\n                    }\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"email\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group m-0\">\r\n                  <label>Password</label>\r\n                  <Field\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    className={\r\n                      \"form-control \" +\r\n                      (errors.password && touched.password ? \"is-invalid\" : \"\")\r\n                    }\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"password\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group m-0\">\r\n                  <label>Confirm password</label>\r\n                  <Field\r\n                    name=\"confirmPassword\"\r\n                    type=\"password\"\r\n                    className={\r\n                      \"form-control \" +\r\n                      (errors.confirmPassword && touched.confirmPassword\r\n                        ? \"is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"confirmPassword\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group m-0\">\r\n                  <label>Male</label>\r\n                  <Field\r\n                    name=\"gender\"\r\n                    value=\"Male\"\r\n                    type=\"radio\"\r\n                    className={\r\n                      \"m-4\" +\r\n                      (errors.gender && touched.gender ? \"is-invalid\" : \"\")\r\n                    }\r\n                  />\r\n                  <label>Female</label>\r\n                  <Field\r\n                    name=\"gender\"\r\n                    value=\"Female\"\r\n                    type=\"radio\"\r\n                    className={\r\n                      \"m-4\" +\r\n                      (errors.gender && touched.gender ? \"is-invalid\" : \"\")\r\n                    }\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"gender\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Department</label>\r\n                  <Field\r\n                    name=\"department\"\r\n                    as=\"select\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.department && touched.department\r\n                        ? \"is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                  >\r\n                    <option value=\"\" label=\"Select a department\" />\r\n                    <option value=\"Management\" label=\"Management\" />\r\n                    <option value=\"HR\" label=\"HR\" />\r\n                    <option value=\"Developer\" label=\"Developer\" />\r\n                  </Field>\r\n                  <ErrorMessage\r\n                    name=\"department\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group  form-check\">\r\n                  <Field\r\n                    type=\"checkbox\"\r\n                    name=\"acceptTandC\"\r\n                    className={\r\n                      \"form-check-input \" +\r\n                      (errors.acceptTandC && touched.acceptTandC\r\n                        ? \" is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                  />\r\n                  <label htmlFor=\"acceptTandC\" className=\"form-check-label\">\r\n                    Accept Terms & Conditions\r\n                  </label>\r\n                  <ErrorMessage\r\n                    name=\"acceptTandC\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group m-0\">\r\n                  <button type=\"submit\" className=\"btn-dark btn\">\r\n                    Submit\r\n                  </button>\r\n                  <button type=\"reset\" className=\"btn-dark btn ml-2\">\r\n                    Reset\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      <UserDisplay user={user} />\r\n    </>\r\n  );\r\n}\r\n\r\nconst UserDisplay = (props) => {\r\n  if (props.user !== undefined) {\r\n    return (\r\n      <div className=\"d-flex justify-content-center align-items-center w-75\">\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>\r\n              {props.user.firstName} {props.user.lastName}\r\n            </Card.Title>\r\n            <Card.Text>\r\n              <p>\r\n                <b>Email: </b>\r\n                {props.user.email}\r\n              </p>\r\n              <p>\r\n                <b>Gender: </b>\r\n                {props.user.gender}\r\n              </p>\r\n              <p>\r\n                <b>Department: </b>\r\n                {props.user.department}\r\n              </p>\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <></>;\r\n  }\r\n};\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport User from './Component/User'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <User />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}