{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","ContactUs","AboutUs","Welcome","CopyRights","Patent","Headers","useRouteMatch","path","url","className","to","HeaderChild","QueryParams","URLSearchParams","useLocation","search","userArray","elements","forEach","value","key","result","push","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAYA,SAASA,IACP,OACE,6BACE,gDAKN,SAASC,IACP,OACE,6BACE,sDAIN,SAASC,IACP,OACE,6BACE,oDAIN,SAASC,IACP,OACE,6BACE,oDAKN,SAASC,IACP,OACE,6BACE,0DAKN,SAASC,IACP,OACE,6BACE,oDAMN,SAASC,IAAU,IAAD,EACMC,cAAdC,EADQ,EACRA,KAAMC,EADE,EACFA,IACd,OACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,UAAU,aAAaC,GAAE,UAAKF,EAAL,cAA/B,aAIF,4BACE,kBAAC,IAAD,CAAMC,UAAU,aAAaC,GAAE,UAAKF,EAAL,cAA/B,aAIF,4BACE,kBAAC,IAAD,CAAMC,UAAU,aAAaC,GAAE,UAAKF,EAAL,aAA/B,aAIF,4BACE,kBAAC,IAAD,CAAMC,UAAU,aAAaC,GAAE,UAAKF,EAAL,YAA/B,aAKJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOD,KAAI,UAAKA,IACd,kBAACI,EAAD,SAWV,SAASA,IAEP,IAAMC,EAJE,IAAIC,gBAAgBC,cAAcC,QAKtCC,EAAY,GAOVC,GANOL,EAAYM,SAAQ,SAAUC,EAAOC,GAEhD,IAAMC,EAAS,CAAED,IAAKA,EAAKD,MAAOA,GAClCH,EAAUM,KAAKD,MAGAL,EAAUO,KAAI,SAACF,GAAD,OAC7B,4BACGA,EAAOD,IADV,MACkBC,EAAOF,MAAO,SAGlC,OACE,6BACE,4BAAKF,IA0EIO,MArEf,WACE,OACE,oCACE,yBAAKf,UAAU,OACb,kBAAC,IAAD,KACE,4BAAQA,UAAU,6DAChB,yBAAKA,UAAU,uCACb,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,SAA1B,QAGA,kBAAC,IAAD,CAAMD,UAAU,OAAOC,GAAG,eAA1B,cAGA,kBAAC,IAAD,CAAMD,UAAU,OAAOC,GAAG,aAA1B,YAGA,kBAAC,IAAD,CAAMD,UAAU,OAAOC,GAAG,WAA1B,mBAKJ,yBAAKD,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOF,KAAK,SACV,kBAACR,EAAD,OAEF,kBAAC,IAAD,CAAOQ,KAAK,eACV,kBAACP,EAAD,OAEF,kBAAC,IAAD,CAAOO,KAAK,aACV,kBAACN,EAAD,OAEF,kBAAC,IAAD,CAAOM,KAAK,WACV,kBAACF,EAAD,SAIN,yBAAKI,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOF,KAAK,YACV,kBAACL,EAAD,OAEF,kBAAC,IAAD,CAAOK,KAAK,eACV,kBAACJ,EAAD,OAEF,kBAAC,IAAD,CAAOI,KAAK,WACV,kBAACH,EAAD,SAIN,4BAAQK,UAAU,6DAChB,yBAAKA,UAAU,uCACb,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,YAA1B,WAGA,kBAAC,IAAD,CAAMD,UAAU,OAAOC,GAAG,eAA1B,cAGA,kBAAC,IAAD,CAAMD,UAAU,OAAOC,GAAG,WAA1B,gB,MCtKMe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc951a24.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  HashRouter as Router,\r\n  Link,\r\n  Switch,\r\n  Route,\r\n  useParams,\r\n  useRouteMatch,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <h1>Hello from home</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ContactUs() {\r\n  return (\r\n    <div>\r\n      <h1>Hello from Contact Us</h1>\r\n    </div>\r\n  );\r\n}\r\nfunction AboutUs() {\r\n  return (\r\n    <div>\r\n      <h1>Hello from About Us</h1>\r\n    </div>\r\n  );\r\n}\r\nfunction Welcome() {\r\n  return (\r\n    <div>\r\n      <h1>Welcome from Footer</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CopyRights() {\r\n  return (\r\n    <div>\r\n      <h1>These are the Copy Rights</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Patent() {\r\n  return (\r\n    <div>\r\n      <h1>Welcome from Patent</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction Headers(){\r\n  const { path, url } = useRouteMatch();\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li>\r\n          <Link className=\"text-white\" to={`${url}/comments`}>\r\n            Comments\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link className=\"text-white\" to={`${url}/Feedback`}>\r\n            Feedback\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link className=\"text-white\" to={`${url}/EmailUs`}>\r\n            Email Us\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link className=\"text-white\" to={`${url}/TopUps`}>\r\n            Top Ups\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n      <Switch>\r\n        <Route path={`${path}`}>\r\n          <HeaderChild />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction useQuery(){\r\n   return new URLSearchParams(useLocation().search)\r\n}\r\nfunction HeaderChild() {\r\n  debugger;\r\n  const QueryParams = useQuery();\r\n  let userArray = [];\r\n  const html = QueryParams.forEach(function (value, key) {\r\n    debugger;\r\n    const result = { key: key, value: value };\r\n    userArray.push(result);\r\n  });\r\n\r\n  const elements = userArray.map((result) => (\r\n    <h3>\r\n      {result.key} : {result.value}{\" \"}\r\n    </h3>\r\n  ));\r\n  return (\r\n    <div>\r\n      <h1>{elements}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        <Router>\r\n          <header className=\"mx-auto  d-flex align-items-center justify-content-center\">\r\n            <nav className=\"w-50 d-flex justify-content-between\">\r\n              <Link className=\"link\" to=\"/Home\">\r\n                Home\r\n              </Link>\r\n              <Link className=\"link\" to=\"/contact-us\">\r\n                Contact Us\r\n              </Link>\r\n              <Link className=\"link\" to=\"/about-us\">\r\n                About Us\r\n              </Link>\r\n              <Link className=\"link\" to=\"/header\">\r\n                Child Routing\r\n              </Link>\r\n            </nav>\r\n          </header>\r\n          <div className=\"content\">\r\n            <Switch>\r\n              <Route path=\"/Home\">\r\n                <Home />\r\n              </Route>\r\n              <Route path=\"/contact-us\">\r\n                <ContactUs />\r\n              </Route>\r\n              <Route path=\"/about-us\">\r\n                <AboutUs />\r\n              </Route>\r\n              <Route path=\"/header\">\r\n                <Headers />\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n          <div className=\"content\">\r\n            <Switch>\r\n              <Route path=\"/welcome\">\r\n                <Welcome />\r\n              </Route>\r\n              <Route path=\"/copyRights\">\r\n                <CopyRights />\r\n              </Route>\r\n              <Route path=\"/Patent\">\r\n                <Patent />\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n          <footer className=\"mx-auto  d-flex align-items-center justify-content-center\">\r\n            <nav className=\"w-50 d-flex justify-content-between\">\r\n              <Link className=\"link\" to=\"/welcome\">\r\n                Welcome\r\n              </Link>\r\n              <Link className=\"link\" to=\"/copyRights\">\r\n                Copy Right\r\n              </Link>\r\n              <Link className=\"link\" to=\"/Patent\">\r\n                Patent\r\n              </Link>\r\n            </nav>\r\n          </footer>\r\n        </Router>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}