{"version":3,"sources":["serviceWorker.js","HOC/Wrappedcomponent.js","Components/Componentdisplay.js","Components/UserList.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Wrappedcomponent","DisplayComponent","isloaded","props","Spinner","animation","role","className","UserWithLoader","wrappedComponent","users","map","item","id","name","email","phone","age","city","UserData","useState","error","setError","isLoaded","setIsLoaded","setItems","useEffect","fetch","then","res","json","result","message","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","module","exports"],"mappings":"+OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCASC,MAff,SAA0BC,GACxB,OAAO,YAA2C,IAAvBC,EAAsB,EAAtBA,SAAaC,EAAS,4BAC/C,OAAID,EACK,kBAACD,EAAqBE,GAG7B,6BACE,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAMC,UAAU,WAAhB,kBCLJC,G,MAAiBC,GCLH,SAACN,GACnB,OACE,yBAAKI,UAAU,qDACb,2BAAOA,UAAU,6CACf,4BACE,wBAAIA,UAAU,OAAd,MACA,wBAAIA,UAAU,OAAd,QACA,wBAAIA,UAAU,OAAd,SACA,wBAAIA,UAAU,OAAd,SACA,wBAAIA,UAAU,OAAd,OALF,SAK+B,wBAAIA,UAAU,OAAd,SAE9BJ,EAAMO,MAAMC,KAAI,SAACC,GAAD,OAIf,4BACE,wBAAIL,UAAU,OAAOK,EAAKC,IAC1B,wBAAIN,UAAU,OAAOK,EAAKE,MAC1B,wBAAIP,UAAU,OAAOK,EAAKG,OAC1B,wBAAIR,UAAU,OAAOK,EAAKI,OAC1B,wBAAIT,UAAU,OAAOK,EAAKK,KAL5B,SAME,wBAAIV,UAAU,OAAOK,EAAKM,gBDWvBC,EA1BE,WAAO,IAAD,EACKC,mBAAS,MADd,mBACdC,EADc,KACPC,EADO,OAEWF,oBAAS,GAFpB,mBAEdG,EAFc,KAEJC,EAFI,OAGKJ,mBAAS,IAHd,mBAGdV,EAHc,KAGPe,EAHO,KAmBrB,OAfAC,qBAAU,WACRC,MAAM,qDACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACCP,GAAY,GACZC,EAASM,MAEX,SAACV,GACCG,GAAY,GACZF,EAASD,QAGd,IAECA,EACK,uCAAaA,EAAMW,SAEnB,kBAACxB,EAAD,CAAgBN,SAAUqB,EAAUb,MAAOA,K,MEtBtDuB,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,SJ4H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBX,MAAK,SAAAY,GACJA,EAAaC,gBAEdC,OAAM,SAAArB,GACLsB,QAAQtB,MAAMA,EAAMW,a,kBKzI5BY,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.5d64769a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nfunction Wrappedcomponent(DisplayComponent) {\r\n  return function loadData({ isloaded, ...props }) {\r\n    if (isloaded) {\r\n      return <DisplayComponent {...props} />;\r\n    }\r\n    return (\r\n      <div>\r\n        <Spinner animation=\"border\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Wrappedcomponent;\r\n","import React from \"react\";\r\nimport wrappedComponent from \"../HOC/Wrappedcomponent\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { usePromiseTracker } from \"react-promise-tracker\";\r\nimport UserList from \"../Components/UserList\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nconst UserWithLoader = wrappedComponent(UserList);\r\nconst UserData = () => {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [users, setItems] = useState([]);\r\n  useEffect(() => {\r\n    fetch(\"https://5e4a92a66eafb7001488c6a6.mockapi.io/users\")\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result);\r\n        },\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      );\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else {\r\n    return <UserWithLoader isloaded={isLoaded} users={users} />;\r\n  }\r\n};\r\n\r\nexport default UserData;\r\n","import React from \"react\";\r\nconst UserDisplay = (props) => {\r\n  return (\r\n    <div className=\"d-flex justify-content justify-content-center m-5\">\r\n      <table className=\"table-secondary table-striped text-center\">\r\n        <tr>\r\n          <th className=\"p-3\">ID</th>\r\n          <th className=\"p-3\">Name</th>\r\n          <th className=\"p-3\">Email</th>\r\n          <th className=\"p-3\">Phone</th>\r\n          <th className=\"p-3\">Age</th>☻<th className=\"p-3\">City</th>\r\n        </tr>\r\n        {props.users.map((item) => (\r\n          //  <li><p><b>Name:</b> {item.name}</p>\r\n          //      <p><b>City: </b> {item.city}</p>\r\n          //      </li>\r\n          <tr>\r\n            <td className=\"p-3\">{item.id}</td>\r\n            <td className=\"p-3\">{item.name}</td>\r\n            <td className=\"p-3\">{item.email}</td>\r\n            <td className=\"p-3\">{item.phone}</td>\r\n            <td className=\"p-3\">{item.age}</td>☻\r\n            <td className=\"p-3\">{item.city}</td>\r\n          </tr>\r\n        ))}\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserDisplay;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Response from './Components/Componentdisplay'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nReactDOM.render(<Response />,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}